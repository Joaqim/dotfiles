# Auto-generated using compose2nix v0.2.1-pre.
{
  pkgs,
  lib,
  ...
}: let
  MODPACK_VERSION = "BMC4 v28";
  MODPACK_NAME = "Better Minecraft Modpack";
  MODPACK_NAME_SLUG = lib.strings.sanitizeDerivationName MODPACK_NAME;
in {
  # Runtime
  virtualisation = {
    docker = {
      enable = true;
      autoPrune.enable = true;
    };
    oci-containers = {
      backend = "docker";

      # Containers
      containers."${MODPACK_NAME_SLUG}" = {
        image = "itzg/minecraft-server";
        tty = true;
        stdin_open = true;
        environment = {
          ALLOW_FLIGHT = "TRUE";
          DEBUG = "FALSE";
          DIFFICULTY = "easy";
          EULA = "TRUE";
          FORGE_VERSION = "47.2.17";
          LEVEL = "${MODPACK_NAME} World 1";
          MAX_PLAYERS = "10";
          MEMORY = "16G";
          MODRINTH_PACK = "https://cdn.modrinth.com/data/4BV47HRn/versions/IGwlsu0n/Better%20MC%20%5BFORGE%5D%20-%20BMC4%20v28.mrpack";
          MOTD = "Running `${MODPACK_NAME}` version ${MODPACK_VERSION}";
          ONLINE_MODE = "FALSE";
          SEED = "8016074285773694051";
          SERVER_NAME = MODPACK_NAME;
          SNOOPER_ENABLED = "FALSE";
          SPAWN_PROTECTION = "0";
          TYPE = "FORGE";
          TZ = "Europe/Stockholm";
          USE_AIKAR_FLAGS = "TRUE";
          VERSION = "1.20.1";
          VIEW_DISTANCE = "20";
          WHITELIST = "TRUE";
        };
        volumes = [
          "/srv/minecraft/${MODPACK_NAME_SLUG}-data:/data:rw"
        ];
        ports = [
          "25565:25565/tcp"
        ];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=${MODPACK_NAME_SLUG}"
          "--network=${MODPACK_NAME_SLUG}_default"
        ];
      };
    };
  };
  systemd = {
    services = let
      service = "docker-network-${MODPACK_NAME_SLUG}_default.service";
      target = "docker-compose-${MODPACK_NAME_SLUG}-root.target";
    in {
      "docker-${MODPACK_NAME_SLUG}" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "no";
        };
        #restartIfChanged = true;

        after = [
          service
        ];
        requires = [
          service
        ];
        partOf = [
          target
        ];
        wantedBy = [
          target
        ];
      };

      # Networks
      "docker-network-${MODPACK_NAME_SLUG}_default" = {
        path = [pkgs.docker];
        restartIfChanged = true;
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "docker network rm -f ${MODPACK_NAME_SLUG}_default";
        };
        script = ''
          docker network inspect ${MODPACK_NAME_SLUG}_default || docker network create ${MODPACK_NAME_SLUG}_default
        '';
        partOf = [target];
        wantedBy = [target];
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."docker-compose-${MODPACK_NAME_SLUG}-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };
  };
}
